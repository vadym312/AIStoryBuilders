@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls
@using AIStoryBuilders.Services;
@inject NotificationService NotificationService
@inject DialogService DialogService
@inherits OwningComponentBase<AIStoryBuildersService>
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="12">
        <RadzenStack>
            <RadzenFormField Text="Character Name:" Variant="@variant">
                <RadzenTextBox @bind-Value="@objCharacter.CharacterName" />
            </RadzenFormField>
            <RadzenFormField Text="Description:" Variant="@variant">
                <RadzenTextArea @bind-Value="@objCharacter.Description" />
            </RadzenFormField>
            <RadzenFormField Text="Goals:" Variant="@variant">
                <RadzenTextArea @bind-Value="@objCharacter.Goals" />
            </RadzenFormField>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
<br />
<StoryObjectEdit ControlValue=@objCharacter ControlType=ControlType.Character />
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="CharacterSave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        @if (objCharacter.Id > 0)
        {
            <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                          Click="CharacterDelete" />
        }
    </div>
</div>
@code {
    [Parameter] public Character objCharacter { get; set; }

    Variant variant = Variant.Outlined;

    private async Task CharacterSave()
    {
        try
        {
            if (objCharacter.CharacterName != null)
            {
                if (objCharacter.CharacterName.Length < 1)
                {
                    NotificationService.Notify(
                        new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error",
                                Detail = "Character Name is required",
                                Duration = 4000
                            });
                    return;
                }
                else
                {
                    if (objCharacter.Id == -1)
                    {
                        // Add to the database
                        await Service.AddCharacterAsync(objCharacter);
                    }
                    else
                    {
                        // Save to the database
                        await Service.UpdateCharacterAsync(objCharacter);
                    }

                    DialogService.Close(null);
                }
            }
            else
            {
                NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Character Name is required",
                            Duration = 4000
                        });
                return;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task CharacterDelete()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await DialogService.Confirm("Are you sure?", "Delete Character",
                      new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                // Delete from the database
                await Service.DeleteCharacterAsync(objCharacter.Id);

                DialogService.Close(null);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}