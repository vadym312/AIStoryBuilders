@page "/"
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Pages.Controls.Story;
@using AIStoryBuilders.Services;
@using static AIStoryBuilders.Model.OrchestratorMethods;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
@inject SettingsService SettingsService
@implements IDisposable
<PageTitle>AI Story Builders</PageTitle>
<RadzenMenu>
    <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home"></RadzenMenuItem>
    <RadzenMenuItem Click="OnMemoryClicked" Text="Memory" Icon="aspect_ratio"></RadzenMenuItem>
    <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment"></RadzenMenuItem>
    <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
</RadzenMenu>
<br />
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
@if (HomeVisible)
{
    <RadzenButton Click=@(() => NewStory()) Text="New Story" ButtonStyle="ButtonStyle.Success" />
    <br />
    <br />
    <div style="height:500px">
        <RadzenDataList AllowVirtualization=false Style="height:100%;overflow:auto;"
                        WrapItems=true AllowPaging=false
                        Data="@colStorys" TItem="Story">
            <Template Context="story">
                <RadzenCard Style="width: 100%; padding: 1;">
                    <RadzenRow Gap="0">
                        <RadzenButton Text="Select" Click=@(() => EditStory(story))
                                      ButtonStyle="ButtonStyle.Light" Style="width: 150px;height: 20px" />
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        <RadzenText TextStyle="TextStyle.DisplayH5"
                                    class="rz-color-secondary">@(story.Title)</RadzenText>&nbsp;&nbsp;
                        </RadzenRow>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
        </div>
}
@if (SettingsVisible)
{
    <Settings></Settings>
}
@if (MemoryVisible)
{
    <Memory></Memory>
}
@if (LogsVisible)
{
    <Logs></Logs>
}
 @code {
    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    List<Story> colStorys = new List<Story>();
    Story objStory = new Story();

    string Organization = "";
    string ApiKey = "";

    bool InProgress = false;
    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool MemoryVisible = false;
    bool LogsVisible = false;

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            OrchestratorMethods.ReadTextEvent += OrchestratorMethods_ReadTextEvent;

            SettingsService.LoadSettings();
            Organization = SettingsService.Organization;
            ApiKey = SettingsService.ApiKey;

            if (ApiKey == "")
            {
                // Switch to the Settings page
                HomeVisible = false;
                SettingsVisible = true;
                MemoryVisible = false;
                LogsVisible = false;
            }
            else
            {
                // Get the Storys from the database
                colStorys = AIStoryBuildersService.GetStorys();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task NewStory()
    {
        try
        {        
            var NewStoryResult = await dialogService.OpenAsync<NewStory>($"New Story",
                null,
                new DialogOptions() { Width = "650px" });

            if (NewStoryResult != null)
            {
                objStory = (Story)NewStoryResult;

                if (objStory != null)
                {         
                    HomeVisible = false;
                    InProgress = true;
                    StateHasChanged();

                    // Save Story to the database
                    await AIStoryBuildersService.AddStory(objStory);

                    HomeVisible = true;
                    InProgress = false;
                    StateHasChanged();

                    // Edit so that it is not marked as new
                    objStory.Id = 1000;

                    var parms = new Dictionary<string, object>();
                    parms.Add("objStory", objStory);

                    var EditStoryResult = await dialogService.OpenAsync<EditStory>($"{objStory.Title}", parms,
                    new DialogOptions() { Height = "650px", Width = "800px" });
                }

                colStorys = AIStoryBuildersService.GetStorys();

                StateHasChanged();

                HomeVisible = true;
                InProgress = false;
            }
        }
        catch (Exception ex)
        {
            HomeVisible = true;
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task EditStory(Story paramStory)
    {
        try
        {
            InProgress = true;

            var parms = new Dictionary<string, object>();
            parms.Add("objStory", paramStory);

            var EditStoryResult = await dialogService.OpenAsync<EditStory>($"{paramStory.Title}", parms,
            new DialogOptions() { Height = "700px", Width = "800px" });

            colStorys = AIStoryBuildersService.GetStorys();

            StateHasChanged();

            InProgress = false;
        }
        catch (Exception ex)
        {
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    void OnHomeClicked(MenuItemEventArgs args)
    {
        HomeVisible = true;
        SettingsVisible = false;
        MemoryVisible = false;
        LogsVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = true;
        MemoryVisible = false;
        LogsVisible = false;
    }

    void OnMemoryClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        MemoryVisible = true;
        LogsVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        MemoryVisible = false;
        LogsVisible = true;
    }

    // Events

    private void OrchestratorMethods_ReadTextEvent(object sender, EventArgs e)
    {
        ReadTextEventArgs ReadTextEventArguments = (ReadTextEventArgs)e;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Info",
                Detail = ReadTextEventArguments.Message,
                Duration = 4000
            });
    }

    public void Dispose()
    {
        OrchestratorMethods.ReadTextEvent -= OrchestratorMethods_ReadTextEvent;
    }
}