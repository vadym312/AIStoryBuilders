@page "/"
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Services;
@inject IConfiguration _configuration
@inject DialogService dialogService
@inject NotificationService NotificationService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in AIStoryBuildersService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access AIStoryBuildersService using @Service
*@
@inherits OwningComponentBase<AIStoryBuildersService>
<PageTitle>AI Story Builders</PageTitle>
<RadzenButton Click=@(() => NewStory()) Text="New Story" ButtonStyle="ButtonStyle.Success" />
<br />
<br />
<RadzenDataList AllowVirtualization=@allowVirtualization Style="height:400px;overflow:auto;"
                WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                Data="@colStorys" TItem="Story" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true">
    <Template Context="story">
        <RadzenCard Style="width: 100%; padding: 5;">
            <RadzenRow Gap="0">
                <RadzenButton Text="Select" Click=@(() => EditStory(story))
                    ButtonStyle="ButtonStyle.Light" Style="width: 150px;height: 20px" />
                &nbsp;&nbsp;&nbsp;&nbsp;
                <RadzenText TextStyle="TextStyle.DisplayH5" 
                            class="rz-color-secondary">@(story.Title)</RadzenText>&nbsp;&nbsp;
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>
    <br />
    @code {
    bool allowVirtualization = true;
    List<Story> colStorys = new List<Story>();
    Story objStory = new Story();

    string Organization = "";
    string ApiKey = "";

    // Initialize the component by setting the organization and API key
    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get the Storys from the database
            colStorys = await Service.GetStorysAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task NewStory()
    {
        try
        {
            var NewStoryResult = await dialogService.OpenAsync<NewStory>($"New Story",
                null,
                new DialogOptions() { Width = "650px" });

            if (NewStoryResult != null)
            {
                objStory = (Story)NewStoryResult;

                if (objStory != null)
                {
                    // Save Story to the database
                    var objSavedStory = await Service.AddStoryAsync(objStory);

                    var parms = new Dictionary<string, object>();
                    parms.Add("Story", objSavedStory);

                    var EditStoryResult = await dialogService.OpenAsync<EditStory>($"{objSavedStory.ToString}", parms,
                    new DialogOptions() { Height = "600px", Width = "800px" });
                }

                colStorys = await Service.GetStorysAsync();

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task EditStory(Story paramStory)
    {
        try
        {
            var parms = new Dictionary<string, object>();
            parms.Add("Story", paramStory);

            var EditStoryResult = await dialogService.OpenAsync<EditStory>($"{paramStory.Title}", parms,
            new DialogOptions() { Height = "600px", Width = "800px" });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}