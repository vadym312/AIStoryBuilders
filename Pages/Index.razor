@page "/"
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Pages.Controls.Story;
@using AIStoryBuilders.Services;
@inject DialogService dialogService
@inject NotificationService NotificationService
@inject SettingsService SettingsService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in AIStoryBuildersService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access AIStoryBuildersService using @Service
*@
@inherits OwningComponentBase
<PageTitle>AI Story Builders</PageTitle>
<RadzenMenu>
    <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home"></RadzenMenuItem>
    <RadzenMenuItem Click="OnMemoryClicked" Text="Memory" Icon="aspect_ratio"></RadzenMenuItem>
    <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment"></RadzenMenuItem>
    <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
</RadzenMenu>
<br />
@if (HomeVisible)
{
    <RadzenButton Click=@(() => NewStory()) Text="New Story" ButtonStyle="ButtonStyle.Success" />
    <br />
    <br />
    <div style="height:500px">
        <RadzenDataList AllowVirtualization=false Style="height:100%;overflow:auto;"
                        WrapItems=true AllowPaging=false
                        Data="@colStorys" TItem="Story">
            <Template Context="story">
                <RadzenCard Style="width: 100%; padding: 1;">
                    <RadzenRow Gap="0">
                        <RadzenButton Text="Select" Click=@(() => EditStory(story))
                                      ButtonStyle="ButtonStyle.Light" Style="width: 150px;height: 20px" />
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        <RadzenText TextStyle="TextStyle.DisplayH5"
                                    class="rz-color-secondary">@(story.Title)</RadzenText>&nbsp;&nbsp;
                        </RadzenRow>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
        </div>
}
@if (SettingsVisible)
{
    <Settings></Settings>
}
@if (MemoryVisible)
{
    <Memory></Memory>
}
@if (LogsVisible)
{
    <Logs></Logs>
}
 @code {
    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    List<Story> colStorys = new List<Story>();
    Story objStory = new Story();

    string Organization = "";
    string ApiKey = "";

    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool MemoryVisible = false;
    bool LogsVisible = false;

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            SettingsService.LoadSettings();
            Organization = SettingsService.Organization;
            ApiKey = SettingsService.ApiKey;

            if (ApiKey == "")
            {
                // Switch to the Settings page
                HomeVisible = false;
                SettingsVisible = true;
                MemoryVisible = false;
                LogsVisible = false;
            }
            else
            {
                // Get the Storys from the database
                colStorys = AIStoryBuildersService.GetStorys();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task NewStory()
    {
        try
        {
            var NewStoryResult = await dialogService.OpenAsync<NewStory>($"New Story",
                null,
                new DialogOptions() { Width = "650px" });

            if (NewStoryResult != null)
            {
                objStory = (Story)NewStoryResult;

                if (objStory != null)
                {
                    // Save Story to the database
                    AIStoryBuildersService.AddStory(objStory);

                    // Edit so that it is not marked as new
                    objStory.Id = 1000;

                    var parms = new Dictionary<string, object>();
                    parms.Add("objStory", objStory);

                    var EditStoryResult = await dialogService.OpenAsync<EditStory>($"{objStory.Title}", parms,
                    new DialogOptions() { Height = "650px", Width = "800px" });
                }

                colStorys = AIStoryBuildersService.GetStorys();

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task EditStory(Story paramStory)
    {
        try
        {
            var parms = new Dictionary<string, object>();
            parms.Add("objStory", paramStory);

            var EditStoryResult = await dialogService.OpenAsync<EditStory>($"{paramStory.Title}", parms,
            new DialogOptions() { Height = "700px", Width = "800px" });

            colStorys = AIStoryBuildersService.GetStorys();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    void OnHomeClicked(MenuItemEventArgs args)
    {
        HomeVisible = true;
        SettingsVisible = false;
        MemoryVisible = false;
        LogsVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = true;
        MemoryVisible = false;
        LogsVisible = false;
    }

    void OnMemoryClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        MemoryVisible = true;
        LogsVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        MemoryVisible = false;
        LogsVisible = true;
    }
}