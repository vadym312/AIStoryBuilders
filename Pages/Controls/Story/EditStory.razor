@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Pages.Controls.Characters
@using AIStoryBuilders.Pages.Controls.Story
@using AIStoryBuilders.Services;
@inject DialogService dialogService
@inject NotificationService NotificationService
@inherits OwningComponentBase<AIStoryBuildersService>
<PageTitle>@objStory.Title</PageTitle>

<RadzenTabs Change=@OnTabChange TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Details">
            <StoryEdit objStory="objStory" StoryUpdated="SaveStory" StoryDeleted="DeleteStory" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Characters">
            <CharactersEdit objStory="objStory" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Locations">

        </RadzenTabsItem>
        <RadzenTabsItem Text="Chapters">

        </RadzenTabsItem>
        <RadzenTabsItem Text="AI">

        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    [Parameter] public Story objStory { get; set; }

    List<Character> colCharacters = new List<Character>();

    private async Task SaveStory()
    {
        try
        {
            // Update the Story in the database
            await Service.UpdateStoryAsync(objStory);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Story",
                    Detail = "Updated!",
                    Duration = 2000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task DeleteStory()
    {
        try
        {
            // Delete the Story from the database
            await Service.DeleteStoryAsync(objStory.Id);

            dialogService.Close(null);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    async Task OnTabChange(int index)
    {
        switch (index)
        {
            case 0:
                // Story
                objStory = await Service.GetStoryAsync(objStory.Id);
                break;
            case 1:
                // Characters
                break;
            case 2:
                // Locations
                break;
            case 3:
                // Chapters
                break;
            case 4:
                // AI
                break;
        }
    }
}
