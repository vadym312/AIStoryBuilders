@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
<div class="row">
    <div class="col">
        <RadzenButton Text="New Chapter" ButtonStyle="ButtonStyle.Success"
                      Click=@(() => NewChapter()) />&nbsp;&nbsp;
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="ChapterSave" />&nbsp;&nbsp;
        <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                      Click="ChapterDelete" />
    </div>
</div>
<br />
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="12">
        <RadzenStack>
            <RadzenFormField Text="Chapters:" Variant="@variant">
                <RadzenDropDown Data=@colChapters @bind-Value="@SelectedChapter" TextProperty="ChapterName" Change="OnChapterChanged" />
            </RadzenFormField>
            <RadzenFormField Text="Synopsis:" Variant="@variant">
                <RadzenTextArea @bind-Value="@SelectedChapter.Synopsis" MaxLength="1000" Rows="2" />
            </RadzenFormField>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenDataList @ref=objDatalist AllowVirtualization=false Style="height:300px;overflow:auto;"
                WrapItems=false AllowPaging=false
                Data="@colParagraphs" TItem="Paragraph">
    <Template Context="paragraph">
        @if (paragraph.Sequence == 2)
        {
            <RadzenTextArea @bind-Value="@(paragraph.ParagraphContent)" MaxLength="1000" Rows="3" Style="width: 100%;" />
            <br />
            <span>Characters: <RadzenDropDown Data=paragraph.Characters @bind-Value="@SelectedCharacter" /></span>
        }
        else
        {
            <RadzenText>@(paragraph.ParagraphContent)</RadzenText>
        }
    </Template>
</RadzenDataList>
@code {
    [Parameter] public Story objStory { get; set; }
    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    RadzenDataList<Paragraph> objDatalist;
    Variant variant = Variant.Outlined;

    List<Chapter> colChapters = new List<Chapter>();
    List<Paragraph> colParagraphs = new List<Paragraph>();
    Chapter SelectedChapter = new Chapter();
    Paragraph SelectedParagraph = new Paragraph();

    string SelectedCharacter = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            await LoadChapters(objStory);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    public async Task LoadChapters(Story paramStory)
    {
        colChapters = AIStoryBuildersService.GetChapters(paramStory);

        if (colChapters.Count > 0)
        {
            SelectedChapter = colChapters.FirstOrDefault();

            await LoadParagraphs(SelectedChapter);
        }
    }

    public async Task LoadParagraphs(Chapter paramChapter)
    {
        colParagraphs = AIStoryBuildersService.GetParagraphs(paramChapter);

        if (objDatalist != null)
        {
            await objDatalist.Reload();
            dialogService.Refresh();
        }

        if (colParagraphs.Count > 0)
        {
            SelectedParagraph = colParagraphs.FirstOrDefault();
        }
    }

    private async Task NewChapter()
    {
        try
        {
            var newChapter = new Chapter();
            newChapter.Id = -1; // So we know it is new
            newChapter.Story = objStory;

            var EditStoryResult = await dialogService.OpenAsync(
                "New Chapter", ds =>
                @<ChaptersEdit objChapter=newChapter DialogReference="ds"></ChaptersEdit>
                , new DialogOptions() { Height = "500px", Width = "650px" });

            await LoadChapters(objStory);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task ChapterSave()
    {

    }

    private async Task ChapterDelete()
    {

    }

    private async Task OnChapterChanged()
    {
        await LoadParagraphs(SelectedChapter);
    }
}