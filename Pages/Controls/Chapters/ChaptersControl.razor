@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
<RadzenButton Click=@(() => NewChapter()) Text="New Chapter" ButtonStyle="ButtonStyle.Success" />
<br />
<br />
Chapters:
<RadzenDropDown Data=@colChapters @bind-Value="@SelectedChapter" TextProperty="ChapterName" Change="OnChapterChanged" />
<br />
Chapters:
<RadzenDropDown Data=@colParagraphs @bind-Value="@SelectedParagraph" TextProperty="Description" />
<br />
<p>@SelectedChapter.Synopsis</p>
@code {
    [Parameter] public Story objStory { get; set; }
    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    List<Chapter> colChapters = new List<Chapter>();
    List<Paragraph> colParagraphs = new List<Paragraph>();
    Chapter SelectedChapter = new Chapter();
    Paragraph SelectedParagraph = new Paragraph();

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            LoadChapters(objStory);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    public void LoadChapters(Story paramStory)
    {
        colChapters = AIStoryBuildersService.GetChapters(paramStory);

        if (colChapters.Count > 0)
        {
            SelectedChapter = colChapters.FirstOrDefault();

            LoadParagraphs(SelectedChapter);
        }
    }

    public void LoadParagraphs(Chapter paramChapter)
    {
        colParagraphs = AIStoryBuildersService.GetParagraphs(paramChapter);

        if (colParagraphs.Count > 0)
        {
            SelectedParagraph = colParagraphs.FirstOrDefault();
        }
    }

    private async Task NewChapter()
    {
        try
        {
            // var newChapter = new Chapter();
            // newChapter.Id = -1; // So we know it is new
            // newChapter.StoryId = objStory.Id; // Set the StoryId to the current Story

            // var parms = new Dictionary<string, object>();
            // parms.Add("objChapter", newChapter);

            // var NewChapterResult = await dialogService.OpenAsync<ChapterEdit>($"New Chapter",
            // parms,
            // new DialogOptions() { Width = "650px" });

            // Get the Chapters from the database
            //colChapters = await Service.GetChaptersAsync(objStory);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private async Task EditChapter(Chapter paramChapter)
    {
        try
        {
            // var EditStoryResult = await dialogService.OpenAsync(
            //     "Edit Chapter", ds =>
            //     @<ChapterEdit objChapter=paramChapter DialogReference="ds"></ChapterEdit>
            //     , new DialogOptions() { Height = "700px", Width = "650px" });

            // Get the Chapters from the database
            //colChapters = await Service.GetChaptersAsync(objStory);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void OnChapterChanged()
    {
        // ChapterDetails = objCharacter.CharacterBackground.Where(x => x.Type == @strType);
        // DialogReference.Refresh();
    }
}