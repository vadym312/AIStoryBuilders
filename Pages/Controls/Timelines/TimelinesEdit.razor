@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="12">
        <RadzenStack>
            <RadzenFormField Text="Timeline Name:" Variant=Variant.Outlined>
                <RadzenTextBox MaxLength="200" @bind-Value="@objTimeline.TimelineName" />
            </RadzenFormField>
            <RadzenFormField Text="Description:" Variant=Variant.Outlined>
                <RadzenTextArea Rows="2" MaxLength="200" @bind-Value="@objTimeline.TimelineDescription" class="w-100" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenRow Style="margin-top:10px">
            <RadzenColumn Size="5" Offset="1">
                <RadzenFormField Text="Start:" Variant=Variant.Outlined>
                    <RadzenDatePicker AllowClear=false @bind-Value=objTimeline.StartDate />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="5">
                <RadzenFormField Text="Stop:" Variant=Variant.Outlined>
                    <RadzenDatePicker AllowClear=true @bind-Value=objTimeline.StopDate />
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>
    </RadzenColumn>
</RadzenRow>
<br />
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="TimelineSave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        @if (objTimeline.Id > 0)
        {
            <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                          Click="TimelineDelete" />
        }
    </div>
</div>
@code {
    [Parameter] public Timeline objTimeline { get; set; }
    [Parameter] public DialogService DialogReference { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    DateTime dtStart = DateTime.Now;
    DateTime? dtStop = null;

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void TimelineSave()
    {
        try
        {
            if (objTimeline.TimelineName != null)
            {
                if (objTimeline.TimelineName.Length < 1)
                {
                    NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Timeline Name is required",
                            Duration = 4000
                        });
                    return;
                }
                else
                {
                    if (objTimeline.Id == -1)
                    {
                        // Add to the database
                        AIStoryBuildersService.AddTimeline(objTimeline);
                    }
                    else
                    {
                        // Save to the database
                        //AIStoryBuildersService.UpdateTimelineAsync(objTimeline);
                    }

                    dialogService.Close(null);
                }
            }
            else
            {
                NotificationService.Notify(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Timeline Name is required",
                        Duration = 4000
                    });
                return;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task TimelineDelete()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await dialogService.Confirm("Are you sure?", "Delete Timeline",
                  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                // Delete from the database
                //AIStoryBuildersService.DeleteTimelineAsync(objTimeline.Id);

                dialogService.Close(null);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}