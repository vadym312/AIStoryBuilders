@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Services;
@inject IConfiguration _configuration
@inject DialogService dialogService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in AIStoryBuildersService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access AIStoryBuildersService using @Service
*@
@inherits OwningComponentBase<AIStoryBuildersService>
<PageTitle>Edit Story</PageTitle>

<p>@Story.Title</p>
@code {
[Parameter] public Story Story { get; set; }
    string Status = "";
    string Organization = "";
    string ApiKey = "";

    // Initialize the component by setting the organization and API key
    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the Story from the database
        //colStorys = await @Service.GetStorysAsync();
    }

    //    async Task DeleteUserDialog() => await dialogService
    //.OpenAsync("Delete User", ds =>
    //@<RadzenCard Style="padding: 20px;">
    //    <p Style="margin-bottom: 10px;">Confirm?</p>
    //    <div class="row">
    //        <div class="col-md-12">
    //            <RadzenButton Text="Yes" Click="DeleteUser"
    //                      Style="margin-bottom: 10px; width: 150px" />
    //            <RadzenButton Text="No" Click="()=> ds.Close(false)"
    //                      ButtonStyle="ButtonStyle.Secondary"
    //                      Style="margin-bottom: 10px; width: 150px" />
    //        </div>
    //    </div>
    //</RadzenCard>);
}
