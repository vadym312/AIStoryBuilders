@using AIStoryBuilders.Models;
@inject NotificationService NotificationService
@inject DialogService DialogService
<div Class="rz-p-0 rz-p-md-12">
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Story Title:" Variant="@variant">
                    <RadzenTextBox @bind-Value="@objStory.Title" />
                </RadzenFormField>
                <RadzenFormField Text="Style:" Variant="@variant">
                    <RadzenDropDown Data=@colStyles @bind-Value="@objStory.Style" />
                </RadzenFormField>
                <RadzenFormField Text="Theme:" Variant="@variant">
                    <RadzenTextArea @bind-Value="@objStory.Theme" />
                </RadzenFormField>
                <RadzenFormField Text="Synopsis:" Variant="@variant">
                    <RadzenTextArea @bind-Value="@objStory.Synopsis" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</div>
<br />
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="StorySave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                      Click="StoryDelete" />
    </div>
</div>
@code {
    [Parameter] public Story objStory { get; set; }
    [Parameter] public EventCallback<Story> StoryUpdated { get; set; }
    [Parameter] public EventCallback<Story> StoryDeleted { get; set; }

    IEnumerable<string> colStyles;
    string Message = "";
    Variant variant = Variant.Outlined;

    protected override void OnInitialized()
    {
        // Add sample data to the Styles dropdown
        colStyles = new List<string>()
        {
            "Drama",
            "Sci-Fi",
            "Romance",
            "Comedy",
            "Fantasy",
            "Mystery",
            "Thriller",
            "Chidren",
            "Young Adult",
            "Action",
            "Crime",
            "Dystopian",
            "Horror",
            "Erotica",
        };

        if (objStory.Style == null)
        {
            objStory.Style = "Drama";
        }
    }

    private async Task StorySave()
    {
        try
        {
            Message = "";

            if (objStory.Title != null)
            {
                if (objStory.Title.Length < 1)
                {
                    NotificationService.Notify(
                        new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error",
                                Detail = "Story Title is required",
                                Duration = 4000
                            });
                    return;
                }
            }
            else
            {
                NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Story Title is required",
                            Duration = 4000
                        });
                return;
            }

            // Notify parent component
            await StoryUpdated.InvokeAsync(objStory);
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    protected async Task StoryDelete()
    {
        // Ask for confirmation:
        var confirmResult = await DialogService.Confirm("Are you sure?", "Delete Story",
                  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmResult.HasValue && confirmResult.Value)
        {
            // Notify parent component
            await StoryDeleted.InvokeAsync(objStory);
        }
    }
}