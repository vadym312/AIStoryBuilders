@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="12">
        <RadzenStack>
            <RadzenFormField Text="Location Name:" Variant=Variant.Outlined>
                <RadzenTextBox @bind-Value="@objLocation.LocationName" MaxLength="100" />
            </RadzenFormField>
            @if (@objLocation.Id > 0)
            {
                foreach (LocationDescription objLocationDescription in objLocation.LocationDescription)
                {
                    <RadzenFormField Variant="Variant.Outlined">
                        <RadzenTextArea @bind-Value="@objLocationDescription.Description" MaxLength="500" Rows="4" />
                    </RadzenFormField>
                }
            }
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
<br />
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="LocationSave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        @if (objLocation.Id > 0)
        {
            <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                          Click="LocationDelete" />
        }
    </div>
</div>
@code {
    [Parameter] public Location objLocation { get; set; }
    [Parameter] public Location objOrginalLocation { get; set; }
    [Parameter] public DialogService DialogReference { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    string strOriginalLocationName = "";

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            strOriginalLocationName = objOrginalLocation.LocationName;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task LocationSave()
    {
        try
        {
            // Always trim
            objLocation.LocationName = objLocation.LocationName.Trim();

            // Always remove any pipe (|) characters
            objLocation.LocationName = objLocation.LocationName.Replace("|", "");

            if (objLocation.LocationName != null)
            {
                if (objLocation.LocationName.Length < 1)
                {
                    NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Location Name is required",
                            Duration = 4000
                        });
                    return;
                }
                else
                {
                    if (objLocation.Id == -1) // New Location
                    {
                        // Check that there is not already a Location with the same name
                        bool LocationExists = AIStoryBuildersService.LocationExists(objLocation);

                        if (LocationExists)
                        {
                            NotificationService.Notify(
                            new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Error,
                                    Summary = "Validation Error",
                                    Detail = "Location Name already exists. Choose a new name",
                                    Duration = 4000
                                });

                            return;
                        }

                        // Add to the database
                        await AIStoryBuildersService.AddLocationAsync(objLocation);
                    }
                    else // Existing Location
                    {
                        if (objLocation.LocationName != strOriginalLocationName)
                        {
                            // Show a popup that the name is being updated, so we need to update the name in all the stories

                            // Show a prgress bar and show each renaming in a Toast

                            // If rename works then update the name and write any Descriptions in the database
                        }
                        else
                        {
                            // Only the Descriptions are being updated
                            await AIStoryBuildersService.UpdateLocationDescriptions(objLocation);
                        }
                    }

                    DialogService.Close(null);
                }
            }
            else
            {
                NotificationService.Notify(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Location Name is required",
                        Duration = 4000
                    });
                return;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task LocationDelete()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await DialogService.Confirm("Are you sure?", "Delete Location",
                  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                // Delete from the database
                //await Service.DeleteLocationAsync(objLocation.Id);

                DialogService.Close(null);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}