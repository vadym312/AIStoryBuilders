@using AIStoryBuilders.Models;
@using AIStoryBuilders.Pages.Controls;
@using AIStoryBuilders.Services;
@inject IConfiguration _configuration
@inject DialogService dialogService
@inject NotificationService NotificationService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in AIStoryBuildersService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access AIStoryBuildersService using @Service
*@
@inherits OwningComponentBase<AIStoryBuildersService>
<PageTitle>@objStory.Title</PageTitle>

<RadzenTabs Change=@OnChange TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Details">
            <AIStoryBuilders.Pages.Controls.StoryEdit objStory="objStory" StoryChanged="SaveStory" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Characters">

        </RadzenTabsItem>
        <RadzenTabsItem Text="Locations">

        </RadzenTabsItem>
        <RadzenTabsItem Text="Chapters">

        </RadzenTabsItem>
        <RadzenTabsItem Text="AI">

        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    [Parameter] public Story objStory { get; set; }

    string Organization = "";
    string ApiKey = "";

    // Initialize the component by setting the organization and API key
    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get data from the database
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task SaveStory()
    {
        try
        {
            // Update the Story in the database
            await Service.UpdateStoryAsync(objStory);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Story",
                    Detail = "Updated!",
                    Duration = 2000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    void OnChange(int index)
    {
        //console.Log($"Tab with index {index} was selected.");
    }

    //    async Task DeleteUserDialog() => await dialogService
    //.OpenAsync("Delete User", ds =>
    //@<RadzenCard Style="padding: 20px;">
    //    <p Style="margin-bottom: 10px;">Confirm?</p>
    //    <div class="row">
    //        <div class="col-md-12">
    //            <RadzenButton Text="Yes" Click="DeleteUser"
    //                      Style="margin-bottom: 10px; width: 150px" />
    //            <RadzenButton Text="No" Click="()=> ds.Close(false)"
    //                      ButtonStyle="ButtonStyle.Secondary"
    //                      Style="margin-bottom: 10px; width: 150px" />
    //        </div>
    //    </div>
    //</RadzenCard>);
}
