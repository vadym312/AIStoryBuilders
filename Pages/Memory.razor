@using AIStoryBuilders.Model;
@using Newtonsoft.Json;
@using OpenAI;
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject OrchestratorMethods OrchestratorMethods
<h3>Memory</h3>
<div class="row">
    <div class="col">
        <RadzenButton Text="Add Memory" ButtonStyle="ButtonStyle.Success"
                      Click="AddMemory"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        <RadzenButton Text="Search Memory" ButtonStyle="ButtonStyle.Info"
                      Click="SearchMemory"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        <RadzenButton Text="Clear Memory" ButtonStyle="ButtonStyle.Danger"
                      Click="ClearMemory"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
    </div>
</div>
<RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="true"
                PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@AIStoryBuildersMemory" TItem="KeyValuePair<string, string>" ColumnWidth="300px"
                ShowPagingSummary="true" @ref=MemoryGrid>
    <Columns>
        <RadzenDataGridColumn TItem="KeyValuePair<string, string>" Title="" Property="Key" />
    </Columns>
</RadzenDataGrid>


@code {
    RadzenDataGrid<KeyValuePair<string, string>> MemoryGrid;
    string AIStoryBuildersMemoryPath = "";
    Dictionary<string, string> AIStoryBuildersMemory = new Dictionary<string, string>();
    List<(string, float)> similarities = new List<(string, float)>();

    protected override void OnInitialized()
    {
        AIStoryBuildersMemoryPath =
        $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIStoryBuilders/AIStoryBuildersMemory.csv";

        // Read the lines from the .csv file
        foreach (var line in System.IO.File.ReadAllLines(AIStoryBuildersMemoryPath))
        {
            try
            {
                var splitLine = line.Split('|');
                var KEY = splitLine[0];
                var VALUE = splitLine[1];

                AIStoryBuildersMemory.Add(KEY, VALUE);
            }
            catch { }
        }        
    }

    private async Task AddMemory()
    {
        try
        {
            string MemoryText = "";

            // Display inline Radzen dialog to capture text
            var result = await DialogService.OpenAsync("New Memory", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextArea @bind-Value="@MemoryText" class="w-100" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );

            if (result)
            {
                // **** Call OpenAI and get embeddings for the memory text
                // Create an instance of the OpenAI client
                var api = new OpenAIClient(new OpenAIAuthentication(SettingsService.ApiKey, SettingsService.Organization));
                // Get the model details
                var model = await api.ModelsEndpoint.GetModelDetailsAsync("text-embedding-ada-002");
                // Get embeddings for the text
                var embeddings = await api.EmbeddingsEndpoint.CreateEmbeddingAsync(MemoryText, model);
                // Get embeddings as an array of floats
                var EmbeddingVectors = embeddings.Data[0].Embedding.Select(d => (float)d).ToArray();
                // Loop through the embeddings
                List<VectorData> AllVectors = new List<VectorData>();
                for (int i = 0; i < EmbeddingVectors.Length; i++)
                {
                    var embeddingVector = new VectorData
                            {
                                VectorValue = EmbeddingVectors[i]
                            };
                    AllVectors.Add(embeddingVector);
                }
                // Convert the floats to a single string
                var VectorsToSave = "[" + string.Join(",", AllVectors.Select(x => x.VectorValue)) + "]";

                // Write the memory to the .csv file
                using (var streamWriter = new StreamWriter(AIStoryBuildersMemoryPath, true))
                {
                    streamWriter.WriteLine(MemoryText + "|" + VectorsToSave);
                }

                // Add the memory to the dictionary
                AIStoryBuildersMemory.Add(MemoryText, VectorsToSave);
                await MemoryGrid.Reload();

                NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = $"Memory Added",
                            Duration = 4000
                        });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private async Task SearchMemory()
    {
        try
        {
            string SearchText = "";

            // Display inline Radzen dialog to capture text
            var result = await DialogService.OpenAsync("Search Memory", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenTextArea @bind-Value="@SearchText" class="w-100" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
        </RadzenStack>
    );

            if (result)
            {              
               List<(string, float)> FinalResults = await OrchestratorMethods.SearchMemory(SearchText, 10);

                // Display inline Radzen dialog to capture text
                await DialogService.OpenAsync("Search Results", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenListBox TValue="string" Data=@FinalResults Style="width: 100%; height:200px" />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        );

            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }


    private async Task ClearMemory()
    {
        try
        {
            AIStoryBuildersMemory = new Dictionary<string, string>();

            using (var streamWriter = new StreamWriter(AIStoryBuildersMemoryPath))
            {
                streamWriter.WriteLine("** AIStoryBuildersMemory started at " + DateTime.Now + "|");
            }

            // Read the lines from the .csv file
            foreach (var line in System.IO.File.ReadAllLines(AIStoryBuildersMemoryPath))
            {
                var splitLine = line.Split('|');
                var KEY = splitLine[0];
                var VALUE = splitLine[1];

                AIStoryBuildersMemory.Add(KEY, VALUE);
            }
            await MemoryGrid.Reload();

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Log Cleared",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}
