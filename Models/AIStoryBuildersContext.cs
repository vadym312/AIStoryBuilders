// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AIStoryBuilders.Models;

public partial class AIStoryBuildersContext : DbContext
{
    public AIStoryBuildersContext(DbContextOptions<AIStoryBuildersContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Chapter> Chapter { get; set; }

    public virtual DbSet<Character> Character { get; set; }

    public virtual DbSet<CharacterBackground> CharacterBackground { get; set; }

    public virtual DbSet<CharacterBackgroundVectorData> CharacterBackgroundVectorData { get; set; }

    public virtual DbSet<Location> Location { get; set; }

    public virtual DbSet<Paragraph> Paragraph { get; set; }

    public virtual DbSet<ParagraphCharacter> ParagraphCharacter { get; set; }

    public virtual DbSet<ParagraphLocation> ParagraphLocation { get; set; }

    public virtual DbSet<ParagraphVectorData> ParagraphVectorData { get; set; }

    public virtual DbSet<Story> Story { get; set; }

    public virtual DbSet<Timeline> Timeline { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Chapter>(entity =>
        {
            entity.Property(e => e.ChapterName)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.Synopsis)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.Story).WithMany(p => p.Chapter)
                .HasForeignKey(d => d.StoryId)
                .HasConstraintName("FK_Chapter_Story");
        });

        modelBuilder.Entity<Character>(entity =>
        {
            entity.Property(e => e.CharacterName)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.Goals)
                .IsRequired()
                .HasMaxLength(4000);

            entity.HasOne(d => d.Story).WithMany(p => p.Character)
                .HasForeignKey(d => d.StoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Character_Story");
        });

        modelBuilder.Entity<CharacterBackground>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CharacterBackgroundParagraph");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.ParagraphContent)
                .IsRequired()
                .HasMaxLength(3000);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Character).WithMany(p => p.CharacterBackground)
                .HasForeignKey(d => d.CharacterId)
                .HasConstraintName("FK_CharacterBackground_Character");

            entity.HasOne(d => d.Timeline).WithMany(p => p.CharacterBackground)
                .HasForeignKey(d => d.TimelineId)
                .HasConstraintName("FK_CharacterBackground_Timeline");
        });

        modelBuilder.Entity<CharacterBackgroundVectorData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ChracterBackgroundParagraphVectorData");

            entity.Property(e => e.VectorValue).HasColumnName("vector_value");
            entity.Property(e => e.VectorValueId).HasColumnName("vector_value_id");

            entity.HasOne(d => d.CharacterBackground).WithMany(p => p.CharacterBackgroundVectorData)
                .HasForeignKey(d => d.CharacterBackgroundId)
                .HasConstraintName("FK_CharacterBackgroundParagraphVectorData_CharacterBackgroundParagraph");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.LocationName)
                .IsRequired()
                .HasMaxLength(4000);

            entity.HasOne(d => d.Story).WithMany(p => p.Location)
                .HasForeignKey(d => d.StoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Location_Story");
        });

        modelBuilder.Entity<Paragraph>(entity =>
        {
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.ParagraphContent)
                .IsRequired()
                .HasMaxLength(3000);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Chapter).WithMany(p => p.Paragraph)
                .HasForeignKey(d => d.ChapterId)
                .HasConstraintName("FK_Paragraph_Chapter");

            entity.HasOne(d => d.Timeline).WithMany(p => p.Paragraph)
                .HasForeignKey(d => d.TimelineId)
                .HasConstraintName("FK_Paragraph_Timeline");
        });

        modelBuilder.Entity<ParagraphCharacter>(entity =>
        {
            entity.ToTable("Paragraph_Character");

            entity.HasOne(d => d.Character).WithMany(p => p.ParagraphCharacter)
                .HasForeignKey(d => d.CharacterId)
                .HasConstraintName("FK_Paragraph_Character_Character");

            entity.HasOne(d => d.Paragraph).WithMany(p => p.ParagraphCharacter)
                .HasForeignKey(d => d.ParagraphId)
                .HasConstraintName("FK_Paragraph_Character_Paragraph");
        });

        modelBuilder.Entity<ParagraphLocation>(entity =>
        {
            entity.ToTable("Paragraph_Location");

            entity.HasOne(d => d.Location).WithMany(p => p.ParagraphLocation)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_Paragraph_Location_Location");

            entity.HasOne(d => d.Paragraph).WithMany(p => p.ParagraphLocation)
                .HasForeignKey(d => d.ParagraphId)
                .HasConstraintName("FK_Paragraph_Location_Paragraph");
        });

        modelBuilder.Entity<ParagraphVectorData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ParagragraphVectorData");

            entity.Property(e => e.VectorValue).HasColumnName("vector_value");
            entity.Property(e => e.VectorValueId).HasColumnName("vector_value_id");

            entity.HasOne(d => d.Paragraph).WithMany(p => p.ParagraphVectorData)
                .HasForeignKey(d => d.ParagraphId)
                .HasConstraintName("FK_ParagragraphVectorData_Paragraph");
        });

        modelBuilder.Entity<Story>(entity =>
        {
            entity.Property(e => e.Style)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Synopsis)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.Theme)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<Timeline>(entity =>
        {
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StopDate).HasColumnType("datetime");
            entity.Property(e => e.TimelineDescription)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.TimelineName)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.Story).WithMany(p => p.Timeline)
                .HasForeignKey(d => d.StoryId)
                .HasConstraintName("FK_Timeline_Story");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}