@using AIStoryBuilders.Model;
@using Newtonsoft.Json;
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject IJSRuntime JSRuntime
<h3>Settings</h3>
<div class="container-fluid">
    <div>
        <RadzenFormField Text="OpenAI Organization:" Variant="@variant">
            <RadzenTextBox @bind-Value="@Organization" style="width:300px;" />
        </RadzenFormField>
    </div>
    <div class="col-12">
        <RadzenFormField Text="OpenAI ApiKey:" Variant="@variant">
            <RadzenTextBox @bind-Value="@ApiKey" @oninput="APIKeyDetection" style="width:450px;" />
        </RadzenFormField>
    </div>
</div>
<br />
@if (!IsSettingsEntered)
{
    <div class="row">
        <div class="col">
            <RadzenButton Text="An OpenAI API Key is required (Click here to get one)" ButtonStyle="ButtonStyle.Secondary"
                          Click="GetAPIKey"
                          Style="margin-bottom: 10px; width: 500px" />
        </div>
    </div>
}
else
{
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="SettingsSave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
    </div>
</div>
}
@code {

    Variant variant = Variant.Outlined;

    string Organization = "";
    string ApiKey = "";

    bool IsSettingsEntered = false;

    protected override void OnInitialized()
    {
        SettingsService.LoadSettings();
        Organization = SettingsService.Organization;
        ApiKey = SettingsService.ApiKey;

        if(ApiKey.Length > 1)
        {
            IsSettingsEntered = true;
        }
        else
        {
            IsSettingsEntered = false;
        }
    }

    private async Task GetAPIKey()
    {
        // Open a new window to the OpenAI API Key page
        await JSRuntime.InvokeVoidAsync("open", "https://platform.openai.com/account/api-keys");
    }

    private void APIKeyDetection(ChangeEventArgs args)
    {
        if (args.Value.ToString().Length > 1)
        {
            IsSettingsEntered = true;
        }
        else
        {
            IsSettingsEntered = false;
        }
    }

    private async Task SettingsSave()
    {
        try
        {
            // Update Settings
            await SettingsService.SaveSettings(Organization, ApiKey);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Saved",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}