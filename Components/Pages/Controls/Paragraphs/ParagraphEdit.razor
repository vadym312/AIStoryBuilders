@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@using static AIStoryBuilders.AI.OrchestratorMethods
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
    @if (!InEditMode)
    {
        <div id="ParagraphDiv" @onclick="onClickParagraph">
            <span>@objParagraph.ParagraphContent</span>
        </div>
    }
    else
    {
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap" Style="margin-bottom:10px">
            <RadzenSpeechToTextButton Change="@(args => OnSpeechCaptured(args, false, "TextToSpeech"))" />
            <RadzenButton Click="onClickClose" Icon="privacy_tip" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Medium" />

            <RadzenButton Click="onClickCharacter" Text="Characters" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" />
            <RadzenButton Click="onClickLocation" Text="Location" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" />
            <RadzenButton Click="onClickTimeline" Text="Timeline" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" />

            <RadzenButton Click="onClickSave" Text="Save" Icon="check_circle" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" />
            @if (Deleteable)
            {
                <RadzenButton Click="onClickDelete" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" />
            }
            <RadzenButton Click="onClickClose" Icon="exit_to_app" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
        </RadzenStack>

        <RadzenTextArea @bind-Value="@objParagraph.ParagraphContent" MaxLength="1000" Rows="12" Style="width:100%;height:100%" />
    }
}
@code {
    [Parameter] public EventCallback LoadParagraphs { get; set; }

    [Parameter] public Paragraph objParagraph { get; set; }
    [Parameter] public Chapter objChapter { get; set; }
    [Parameter] public List<Character> colCharacters { get; set; }
    [Parameter] public List<Location> colLocations { get; set; }
    [Parameter] public List<Timeline> colTimelines { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;
    SettingsService SettingsService;

    bool InEditMode = false;
    bool Deleteable = false;
    bool InProgress = false;

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
            SettingsService = (SettingsService)ScopedServices.GetService(typeof(SettingsService));
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    // Events

    private void onClickParagraph()
    {
        InEditMode = true;

        // Compute Deleteable
        int CountOfParagraphs = AIStoryBuildersService.CountParagraphs(objChapter);
        Deleteable = (objParagraph.Sequence == CountOfParagraphs);
    }

    private void onClickClose()
    {
        InEditMode = false;
    }

    private async Task onClickCharacter()
    {
        // Turn colCharacters into a list of strings
        var AllCharacterList = colCharacters.Select(c => c.CharacterName).ToList();

        // Turn objParagraph.Characters into a list of strings
        var SelectedCharacterList = objParagraph.Characters.Select(c => c.CharacterName).OrderBy(x => x).ToList();

        var EditStoryResult = await dialogService.OpenAsync(
     "Select Characters", ds =>
    @<CharacterSelector colCharacters="@AllCharacterList" SelectedCharacters="@SelectedCharacterList" DialogReference="ds">
    </CharacterSelector>
     , new DialogOptions() { Height = "350px", Width = "500px" });

        // Set objParagraph.Characters
        if (EditStoryResult != null)
        {
            objParagraph.Characters = new List<Character>();
            foreach (var character in EditStoryResult)
            {
                objParagraph.Characters.Add(new Character() { CharacterName = character });
            }
        }
    }

    private async Task onClickLocation()
    {
        // Turn colLocations into a list of strings
        var AllLocationList = colLocations.Select(c => c.LocationName).OrderBy(x => x).ToList();
        AllLocationList.Add("");

        // Get SelectedLocation
        var SelectedLocation = objParagraph.Location.LocationName;

        var EditStoryResult = await dialogService.OpenAsync(
    "Select Location", ds =>
    @<LocationSelector colLocations="@AllLocationList" SelectedLocation="@SelectedLocation" DialogReference="ds">
    </LocationSelector>
    , new DialogOptions() { Height = "200px", Width = "500px" });

        // Set objParagraph.Location.LocationName to SelectedLocation
        if (EditStoryResult != null)
        {
            objParagraph.Location.LocationName = EditStoryResult;
        }
    }

    private async Task onClickTimeline()
    {
        // Turn colTimelines into a list of strings
        var AllTimelineList = colTimelines.Select(c => c.TimelineName).OrderBy(x => x).ToList();
        AllTimelineList.Add("");

        // Get SelectedTimeline
        var SelectedTimeline = objParagraph.Timeline.TimelineName;

        var EditStoryResult = await dialogService.OpenAsync(
    "Select Timeline", ds =>
    @<TimelineSelector colTimelines="@AllTimelineList" SelectedTimeline="@SelectedTimeline" DialogReference="ds">
    </TimelineSelector>
    , new DialogOptions() { Height = "200px", Width = "500px" });

        // Set objParagraph.Timeline.TimelineName to SelectedTimeline
        if (EditStoryResult != null)
        {
            objParagraph.Timeline.TimelineName = EditStoryResult;
        }
    }

    void OnSpeechCaptured(string speechValue, bool updateTextArea, string name)
    {
        // Append to objParagraph.ParagraphContent
        objParagraph.ParagraphContent += speechValue;
    }

    private async Task onClickSave()
    {
        try
        {
            // Validate ParagraphContent
            if (objParagraph.ParagraphContent.Trim().Length < 1)
            {
                NotificationService.Notify(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Paragraph content is required",
                        Duration = 4000
                    });
                return;
            }

            // Save
            InEditMode = false;

            InProgress = true;
            StateHasChanged();

            // Is AutoAttributeDetection on?
            if (SettingsService.AutomaticAttributeDetection)
            {
                //Calling ChatGPT to detect Attributes...
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Info",
                        Detail = "Calling ChatGPT to detect Attributes...",
                        Duration = 2000
                    });

                // Simplify Characters to only CharacterName and CharacterType and value
                var colCharactersInTimeline = AIStoryBuildersService.SimplifyCharacter(colCharacters,objParagraph);

                // Pass in all existing Characters and detect new ones and/or attributes
                List<SimpleCharacter> result = await OrchestratorMethods.DetectCharacterAttributes(objParagraph, colCharactersInTimeline);
            }

            //AIStoryBuildersService.UpdateParagraph(objChapter, objParagraph);

            InProgress = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task onClickDelete()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await dialogService.Confirm("Are you sure?", $"Delete Paragraph",
                  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                // Delete
                AIStoryBuildersService.DeleteParagraph(objChapter, objParagraph);
                await LoadParagraphs.InvokeAsync();

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}