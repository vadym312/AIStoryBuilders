@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@if (objStory.Id == -1) // New Story
{
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Story Title:" Variant="@variant">
                    <RadzenTextBox MaxLength="20" @bind-Value="@objStory.Title" />
                </RadzenFormField>
                <RadzenFormField Text="Synopsis:" Variant="@variant">
                    <RadzenTextArea MaxLength="1000" Rows="10" @bind-Value="@objStory.Synopsis" />
                </RadzenFormField>
                <p>Chapters: <RadzenDropDown Data=@colChapters @bind-Value="@objStory.ChapterCount" Style="width:75px" /></p>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <div class="row">
        <div class="col">
            <RadzenButton Text="Create Story" ButtonStyle="ButtonStyle.Success"
                          Click="StorySave"
                          Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        </div>
    </div>
}
else // Existing Story
{
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Story Title:" Variant="@variant">
                    <RadzenLabel Text="@objStory.Title" Style="margin-top:10px; margin-left:10px; margin-bottom:10px" />
                </RadzenFormField>
                <RadzenFormField Text="Style:" Variant="@variant">
                    <RadzenDropDown Data=@colStyles @bind-Value="@objStory.Style" />
                </RadzenFormField>
                <RadzenFormField Text="Synopsis:" Variant="@variant">
                    <RadzenTextArea @bind-Value="@objStory.Synopsis" MaxLength="1000" Rows="5" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <br />
    <div class="row">
        <div class="col">
            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                          Click="StorySave"
                          Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
            <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                          Click="StoryDelete" />
        </div>
    </div>
}
@code {
    [Parameter] public Story objStory { get; set; }
    [Parameter] public EventCallback<Story> StoryUpdated { get; set; }
    [Parameter] public EventCallback<Story> StoryDeleted { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;
    LogService LogService;

    IEnumerable<string> colStyles;
    Variant variant = Variant.Outlined;

    List<string> colChapters = new List<string>()
                {
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                };

    protected override void OnInitialized()
    {
        AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
        OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
        LogService = (LogService)ScopedServices.GetService(typeof(LogService));

        // Add sample data to the Styles dropdown
        colStyles = new List<string>()
        {
            "Drama",
            "Sci-Fi",
            "Romance",
            "Comedy",
            "Fantasy",
            "Mystery",
            "Thriller",
            "Chidren",
            "Young Adult",
            "Action",
            "Crime",
            "Dystopian",
            "Horror",
            "Erotica",
        };

        if (objStory.Style == null)
        {
            objStory.Style = "Drama";
            objStory.ChapterCount = "3";
        }
    }

    private async Task StorySave()
    {
        try
        {
            if (objStory.Title != null)
            {
                if (objStory.Title.Length < 1)
                {
                    NotificationService.Notify(
                        new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error",
                                Detail = "Story Title is required",
                                Duration = 4000
                            });
                    return;
                }
            }
            else
            {
                NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Story Title is required",
                            Duration = 4000
                        });
                return;
            }

            // Ensure IsValidFolderName
            if (!OrchestratorMethods.IsValidFolderName(objStory.Title))
            {
                NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Story Title cannot contain | or ; or \\ or / or :",
                            Duration = 4000
                        });
                return;
            }

            // Trim spaces out of story name
            objStory.Title = OrchestratorMethods.TrimInnerSpaces(objStory.Title);

            if (objStory.Id == 0) // New Story - Do Special Validation
            {
                // Check for duplicate Story Title
                if (AIStoryBuildersService.GetStorys().Where(x => x.Title.ToLower() == objStory.Title.ToLower()).Count() > 0)
                {
                    NotificationService.Notify(
                        new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error",
                                Detail = "Story name already exists",
                                Duration = 4000
                            });
                    return;
                }
            }

            // Notify parent component
            await StoryUpdated.InvokeAsync(objStory);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            LogService.WriteToLog(ex.Message);
        }
    }

    protected async Task StoryDelete()
    {
        // Ask for confirmation:
        var confirmResult = await DialogService.Confirm("Are you sure?", "Delete Story",
                  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmResult.HasValue && confirmResult.Value)
        {
            // Notify parent component
            await StoryDeleted.InvokeAsync(objStory);
        }
    }
}